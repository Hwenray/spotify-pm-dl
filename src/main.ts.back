#!/usr/bin/env node
import { Command } from 'commander';
import dotenv from 'dotenv';
import inquirer from 'inquirer';
import axios from 'axios';
// 导入项目内部模块
import { getAccessToken, getPlaylistTracks, searchTracks, SearchResult } from './spotify.js';
import { fetchDownloadLink } from './dl.js';
import { addToAria2 } from './aria2.js';
import { config } from './config.js';
import { checkFileExists } from './utils.js';
dotenv.config();

const program = new Command();
const downloadDir = config.downloadDir;
const retryDelay = 1000;
const maxRetries = 10;

async function downloadTrack(trackUrl: string, index: number, total: number) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    let artist = '未知艺术家';
    let title = '未知标题';
    try {
      console.log(`正在获取下载链接: ${trackUrl}`);
      const data = await fetchDownloadLink(trackUrl);

      if (!data || !data.success || !data.data?.downloadLink) {
        throw new Error('API 返回异常或下载链接无效');
      }

      const { downloadLink, artist: fetchedArtist, title: fetchedTitle } = data.data;
      artist = fetchedArtist;
      title = fetchedTitle;

      const fileName = `${artist} - ${title}.mp3`.replace(/[<>:"/\\|?*]/g, '');
      const { exists } = await checkFileExists(artist, title);

      if (exists) {
        console.log(`${artist} - ${title}.mp3 已存在，跳过下载。`);
        return;
      }

      console.log(`${index + 1}/${total}: 正在添加到 Aria2 - ${fileName}`);
      await addToAria2(downloadLink, fileName);
      console.log(`${artist} - ${title}.mp3 已成功添加到 Aria2 下载队列。`);
      return;
    } catch (error: any) {
      console.error(`下载失败 (${artist} - ${title}): ${error.message}`);
      if (attempt < maxRetries) {
        console.log(`尝试重试 ${attempt}/${maxRetries}...`);
        await new Promise((resolve) => setTimeout(resolve, retryDelay * attempt));
      } else {
        console.error(`达到最大重试次数，放弃下载。`);
      }
    }
  }
}

// 核心函数：下载歌单
async function downloadPlaylist(playlistUrl: string) {
  const token = await getAccessToken();
  if (!token) {
    console.error('无法获取 Spotify Token');
    return;
  }

  const playlistIdMatch = playlistUrl.match(/playlist\/([a-zA-Z0-9]+)/);
  const playlistId = playlistIdMatch ? playlistIdMatch[1] : playlistUrl;

  const tracks = await getPlaylistTracks(playlistId, token);
  if (!tracks || tracks.length === 0) {
    console.error('无法获取歌单歌曲或歌单为空');
    return;
  }
  console.log(`找到 ${tracks.length} 首歌曲，开始下载...`);

  for (let i = 0; i < tracks.length; i++) {
    await downloadTrack(tracks[i], i, tracks.length);
    await new Promise((resolve) => setTimeout(resolve, retryDelay)); // 防止请求过快加延迟
  }
  console.log('歌单处理完成！');
}

// 定义命令：下载歌单
program
  .command('playlist <url>')
  .alias('p')
  .description('下载 Spotify 歌单')
  .action(downloadPlaylist);

// 定义命令：搜索并下载单曲
program
  .command('search <keywords...>')
  .alias('s')
  .description('搜索并下载单曲')
  .action(async (keywords: string[]) => {
    const query = keywords.join(' ');
    console.log(`搜索中: ${query}`);

    const token = await getAccessToken();
    if (!token) return;

    const results: SearchResult[] = await searchTracks(query, token);

    if (!results || results.length === 0) {
      console.error('未找到相关歌曲。请尝试其他关键词。');
      return;
    }

    let selectedTrackUrl: string | null = null;

    if (results.length === 1) {
      console.log(`找到唯一结果: ${results[0].artist} - ${results[0].title}`);
      selectedTrackUrl = results[0].trackUrl;
    } else {
      const choices = results.map((track, index) => ({
        name: `${index + 1}. ${track.artist} - ${track.title}`,
        value: track.trackUrl,
      }));

      try {
        const { chosenTrackUrl } = await inquirer.prompt([
          {
            type: 'list',
            name: 'chosenTrackUrl',
            message: '请选择要下载的歌曲:',
            choices: choices,
            pageSize: 10,
          },
        ]);
        selectedTrackUrl = chosenTrackUrl;
      } catch {
        console.log('用户取消了选择。');
        return;
      }
    }

    if (!selectedTrackUrl) {
      console.error('未选择歌曲或选择失败。');
      return;
    }

    await downloadTrack(selectedTrackUrl, 0, 1);
  });

// 支持直接传歌单 URL 作为第一个参数，自动开始下载
const firstArg = process.argv[2];
const knownCommands = ['playlist', 'p', 'search', 's', '-h', '--help', '-V', '--version'];

if (firstArg && !knownCommands.includes(firstArg)) {
  downloadPlaylist(firstArg).catch((e) => {
    console.error('脚本运行失败：', e.message);
  });
} else {
  program.parse();
}